import asyncio
from modules.ai_asistant import ChatAssistant
from private.setting import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE, API_KEY
from modules.telegram import TelegramAnalyzer

from datetime import datetime

def print_ai_analysis(ai_result):
    """
    –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ AI –∞–Ω–∞–ª—ñ–∑—É —É –∫–æ–Ω—Å–æ–ª—å
    """
    if ai_result:
        print(f"\nü§ñ AI –ê–Ω–∞–ª—ñ–∑:")
        print(ai_result)
    else:
        print("\n‚ùå AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

def format_messages_for_ai(messages):
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —á–∞—Ç—É
        
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    """
    if not messages:
        return "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
    
    formatted_text = []
    for msg in messages:
        date = msg['date'].strftime('%Y-%m-%d %H:%M:%S')
        sender = "–ú–µ–Ω–µ–¥–∂–µ—Ä" if msg['from_me'] else "–ö–ª—ñ—î–Ω—Ç"
        formatted_text.append(f"{date} - {sender}: {msg['text']}")
    
    return "\n".join(formatted_text)

async def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    telegram = TelegramAnalyzer(TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE)
    ai_analyzer = ChatAssistant(API_KEY)  
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
        await telegram.connect()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —á–∞—Ç—ñ–≤
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é
        all_chats = await telegram.get_recent_chats()
        recent_chats = [chat for chat in all_chats]
        
        if not recent_chats:
            print("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            return
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
        for chat in recent_chats:
            print(f"\n--- –ê–Ω–∞–ª—ñ–∑ —á–∞—Ç—É: {chat['name']} (ID: {chat['id']}) ---")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å
            messages = await telegram.get_chat_history(chat['id'], days_back=1)
            
            if not messages:
                print("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
                continue

            # –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –∑ –º–æ–¥—É–ª—è telegram)
            await telegram.print_messages(messages)
            
            # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –∑ –º–æ–¥—É–ª—è telegram)
            telegram.print_messages_analysis(messages)
            
            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è AI
            messages_text = format_messages_for_ai(messages)
            
            # AI –∞–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Ç—ñ–≤)
            try:
                print("\nüîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è AI –∞–Ω–∞–ª—ñ–∑...")
                ai_result = ai_analyzer.analyze_chat_messages(
                    messages_text, 
                    user_id=f"chat_{chat['id']}"
                )
                
                if not ai_result or ai_result.strip() == "":
                    print("AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                    ai_result = None
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
                ai_result = None

            # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ AI –∞–Ω–∞–ª—ñ–∑—É
            print_ai_analysis(ai_result)

            # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ AI –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç—É
            ai_analyzer.clear_memory(f"chat_{chat['id']}")
            
            print("-" * 50)
            
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        
    finally:
        # –ö–æ—Ä–µ–∫—Ç–Ω–µ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥ Telegram
        try:
            await telegram.disconnect()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—ñ: {e}")

if __name__ == "__main__":
    asyncio.run(main())